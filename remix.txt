// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

contract EstateAgency {
    enum EstateType { House, Flat, Loft }
    enum AdvertisementStatus { Opend, Closed }

    struct Estate { 
        uint estateId;
        uint size;
        string photo;
        bool isActive;
        address owner;
        uint rooms;
        EstateType estateType;
    }

    struct Advertisement { 
        address owner;
        address buyer;
        uint price;
        uint dateTime;
        bool isActive;
        AdvertisementStatus adStatus;
        uint estateId;
    }

    Estate[] public estates;
    Advertisement[] public ads;
    mapping(address => uint) public balances; 

    event EstateCreated(address indexed owner, uint estateId, uint dateTime, EstateType estateType);
    event AdCreated(address indexed owner, uint estateId, uint adId, uint dateTime, uint price);
    event EstateUpdated(address indexed owner, uint estateId, uint dateTime, bool isActive);
    event AdUpdated(address indexed owner, uint estateId, uint adId, uint dateTime, AdvertisementStatus adStatus);
    event EstatePurchased(address indexed owner, address buyer, uint adId, uint estateId, AdvertisementStatus adStatus, uint dateTime, uint price);
    event FundsBack(address indexed receiver, uint amount, uint dateTime);

    modifier EnoughValue(address buyer, uint price) {
        require(balances[buyer] >= price, unicode"Недостаточно средств");
        _;
    }

    modifier OnlyEstateOwner(uint estateId) {
        require(estates[estateId].owner == msg.sender, unicode"Вы не владелец");
        _;
    }

    modifier IsActiveEstate(uint estateId) {
        require(estates[estateId].isActive, unicode"Недвижимость недоступна");
        _;
    }

    modifier IsAdClosed(uint adId) {
        require(ads[adId].adStatus != AdvertisementStatus.Closed, unicode"Объявление закрыто");
        _;
    }

    modifier NotOwner(uint adId) {
        require(ads[adId].owner != msg.sender, unicode"Владелец не может купить свою недвижимость");
        _;
    }

    function createEstate(uint _size, string memory _photo, uint _rooms, EstateType _estateType) public {
        estates.push(Estate(estates.length, _size, _photo, true, msg.sender, _rooms, _estateType));
        emit EstateCreated(msg.sender, estates.length - 1, block.timestamp, _estateType);
    }

    function createAd(uint _estateId, uint _price) public {
        require(estates[_estateId].isActive, unicode"Недвижимость не активна");
        require(estates[_estateId].owner == msg.sender, unicode"Только владелец недвижимости может создать объявление");
        ads.push(Advertisement(msg.sender, address(0), _price, block.timestamp, true, AdvertisementStatus.Opend, _estateId));
        emit AdCreated(msg.sender, estates[_estateId].estateId, ads.length - 1, block.timestamp, _price);
    }

    function updateEstateStatus(uint estateId, bool _isActive) public OnlyEstateOwner(estateId) {
        estates[estateId].isActive = _isActive;
        if (!_isActive) {
            for (uint i = 0; i < ads.length; i++) {
                if (ads[i].estateId == estateId) {
                    ads[i].adStatus = AdvertisementStatus.Closed;
                    emit AdUpdated(ads[i].owner, ads[i].estateId, i, block.timestamp, AdvertisementStatus.Closed);
                }
            }
        }
        emit EstateUpdated(estates[estateId].owner, estateId, block.timestamp, _isActive);
    }

    function updateAdStatus(uint adId, AdvertisementStatus _adStatus) public {
        require(msg.sender == ads[adId].owner, unicode"Только владелец недвижимости может обновить статус");
        require(ads[adId].adStatus != AdvertisementStatus.Closed, unicode"Закрытые объявления нельзя обновить");
        ads[adId].adStatus = _adStatus;
        emit AdUpdated(ads[adId].owner, ads[adId].estateId, adId, block.timestamp, _adStatus);
    }
    function buyEstate(uint adId) public payable IsAdClosed(adId) EnoughValue(msg.sender, ads[adId].price) NotOwner(adId) {
        ads[adId].buyer = msg.sender;
        ads[adId].isActive = false;
        uint estateId = ads[adId].estateId;

        
        payable(estates[estateId].owner).transfer(ads[adId].price);
        balances[msg.sender] -= ads[adId].price;
        balances[estates[estateId].owner] += ads[adId].price;

        
        emit EstatePurchased(ads[adId].owner, msg.sender, adId, ads[adId].estateId, ads[adId].adStatus, block.timestamp, ads[adId].price);
    }

    function withdraw() public {
        uint amount = balances[msg.sender];
        require(amount > 0, unicode"У вас нет денег");
        balances[msg.sender] = 0;
        payable(msg.sender).transfer(amount);
        emit FundsBack(msg.sender, amount, block.timestamp);
    }

    function getBalance() public view returns (uint) {
        return balances[msg.sender];
    }

    function getEstates() public view returns (Estate[] memory) {
        return estates;
    }

    function getAds() public view returns (Advertisement[] memory) {
        return ads;
    }

    function addFunds() public payable {

        balances[msg.sender] += msg.value;
    
    }
}